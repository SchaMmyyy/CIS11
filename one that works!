.686
.MODEL flat, STDCALL
OPTION casemap:none

	include \masm32\include\masm32.inc
    include \masm32\include\user32.inc
    include \masm32\include\kernel32.inc
	includelib \masm32\lib\masm32.lib
    includelib \masm32\lib\user32.lib
    includelib \masm32\lib\kernel32.lib



NumberOfNumbers = 1   ; Number of random numbers to be generated and shown
RangeOfNumbers = 21     ; Range of the random numbers (0..RangeOfNumbers-1)


.DATA
msg1 db 'Press ENTER to roll the 20-sided die! ',13,10,0


.DATA? 
slowdown db 100 dup(?)


.CODE

start:

invoke StdOut, ADDR msg1
invoke StdIn, ADDR slowdown, 100


main PROC
    rdtsc
    invoke nseed, eax                   ; Initialize nrandom_seed

    mov ecx, NumberOfNumbers            ; Loop counter - show ECX random numbers
    LL1:
    push ecx                            ; Preserve loop counter

    invoke nrandom, RangeOfNumbers      ; Range (0..RangeOfNumbers-1)

    call write_number                   ; printf ("%u ", EAX)

    pop ecx                             ; Restore loop counter
    loop LL1

    invoke ExitProcess, 0
main ENDP

write_number PROC STDCALL USES ebx      ; printf ("%u ", EAX)
LOCAL numstring[12]:BYTE, NumberOfBytesWritten:DWORD
.CONST
    fmt db "%u ",0
.CODE
    invoke wsprintf, ADDR numstring, ADDR fmt, eax
    mov ebx, eax                        ; Preserve result - count of written bytes
    invoke GetStdHandle, -11            ; Get STD_OUTPUT_HANDLE
    mov edx, eax                        ; EAX will be used by the following INVOKE
    invoke WriteFile, edx, ADDR numstring, ebx, ADDR NumberOfBytesWritten, 0
    ret
write_number ENDP

END start
